// eslint-disable-next-line import/named -- this is a false positive
import { expect, test } from '@playwright/test';
import { ACCOUNT_ID, ENDPOINT } from '../fixtures/sourcepointConfig';

const iframeMessage = `[id^="sp_message_iframe_"]`;
// const iframePrivacyManager = '#sp_message_iframe_106842';
const iframePrivacyManager = '#sp_message_iframe_1251121';

const acceptAllButton = 'sp_choice_type_11';
const rejectAllButton = 'sp_choice_type_13';

const url = `http://localhost:4321/csnx/cmp-test-page#tcfv2`;
const nonAdvertisingBannerUrl = `http://localhost:4321/csnx/cmp-test-page?CMP_MAIN#tcfv2`


async function getIframeBody(page, selector) {
	const iframeElement = await page.locator(`iframe${selector}`).elementHandle();
	const frame = await iframeElement.contentFrame();
	const iframeBody = await frame.locator('body');

	if (!iframeBody) {
		throw new Error('Iframe body is empty');
	}

	return frame;
}

test.describe('Window', () => {
	test('has the guCmpHotFix object', async ({ page }) => {
		await page.goto(url);
		await page.waitForLoadState('networkidle');
		const guCmpHotFix = await page.evaluate(() => {
			return window.guCmpHotFix;
		});
		expect(guCmpHotFix).toBeDefined();
	});

	test('has correct config params', async ({ page }) => {
		await page.goto(url);
		await page.waitForLoadState('networkidle');
		const spConfig = await page.evaluate(() => {
			return window._sp_.config;
		});
		expect(spConfig.accountId).toBe(ACCOUNT_ID);
		expect(spConfig.baseEndpoint).toBe(ENDPOINT);
	});
});

test.describe('Document', () => {
	test('should have the Sourcepoint iframe', async ({ page }) => {
		await page.goto(url);
		await page.waitForLoadState('networkidle');
		const iframe = page
			.frameLocator('iframe[title="The Guardian consent message"]')
			.locator('.message-overlay');
		await expect(iframe).toBeVisible({ timeout: 3000 });
	});
	test('should have the correct script URL', async ({ page }) => {
		await page.goto(url);
		const script = page.locator('script[id="sourcepoint-lib"]');
		await expect(script).toHaveAttribute(
			'src',
			ENDPOINT + '/unified/wrapperMessagingWithoutDetection.js',
		);
	});
});
test.describe('Interaction', () => {

	test.describe('Consent or Pay banner', () => {
		test(`should give all consents when clicking accept all`, async ({
			page,
		}) => {
			await page.goto(url);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url },
				{ name: 'gdprApplies', value: 'true', url },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${acceptAllButton}`);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('true');
			}
		});

		test(`should have no consents when clicking reject all`, async ({
			page,
		}) => {
			await page.goto(url);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url },
				{ name: 'gdprApplies', value: 'true', url },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${rejectAllButton}`);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('false');
			}
		});

		test(`should deactivate purpose 5, 6, 8, 11 if rejecting 'Personalised content and content measurement' in privacy manager`, async ({ page }) => {
			await page.goto(url);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url },
				{ name: 'gdprApplies', value: 'true', url },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${acceptAllButton}`);

			await page.waitForTimeout(2000);

			await page.click('[data-cy=pm]');

			const privacyManagerIframe = await getIframeBody(
				page,
				iframePrivacyManager,
			);
			await privacyManagerIframe.locator('div.pur-buttons-container').nth(2).locator('button').nth(1).click();
			await privacyManagerIframe.click('button[title="Save and close"]');

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 7,  9, 10]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('true');
			}

			for (const purpose of [5, 6, 8, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('false');
			}
		});

	})

	test.describe('Non Advertising Banner', () => {
		test(`should give all consents when clicking accept all`, async ({
			page,
		}) => {
			await page.goto(nonAdvertisingBannerUrl);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url: nonAdvertisingBannerUrl },
				{ name: 'gdprApplies', value: 'true', url: nonAdvertisingBannerUrl },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${acceptAllButton}`);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('true');
			}
		});

		test(`should have no consents when clicking reject all`, async ({
			page,
		}) => {
			await page.goto(nonAdvertisingBannerUrl);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url: nonAdvertisingBannerUrl },
				{ name: 'gdprApplies', value: 'true', url: nonAdvertisingBannerUrl },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${rejectAllButton}`);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('false');
			}
		});
	})

	test.describe('Moving from Consent or Pay to Non Advertising Banner', () => {
		test(`should give all consents in non advertised banner when clicking accept all in Consent or Pay`, async ({
			page,
		}) => {
			await page.goto(url);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url },
				{ name: 'gdprApplies', value: 'true', url },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${acceptAllButton}`);

			await page.waitForTimeout(2000);

			await page.goto(nonAdvertisingBannerUrl);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('true');
			}

		});

		test(`should give no consents in non advertised banner when clicking reject all in Consent or Pay`, async ({
			page,
		}) => {
			await page.goto(url);
			await page.context().addCookies([
				{ name: 'ccpaApplies', value: 'false', url },
				{ name: 'gdprApplies', value: 'true', url },
			]);

			const iframe = await getIframeBody(page, iframeMessage);
			await iframe.click(`button.${rejectAllButton}`);

			await page.waitForTimeout(2000);

			await page.goto(nonAdvertisingBannerUrl);

			await page.waitForTimeout(2000);

			for (const purpose of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) {
				const consent = await page.getAttribute(
					`[data-purpose="${purpose}"]`,
					'data-consent',
				);
				expect(consent).toBe('false');
			}

		});
	});


});
